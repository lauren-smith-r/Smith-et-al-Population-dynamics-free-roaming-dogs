, colour = "red") +  # overlay the data as red dots
xlab("Time (days)")+
ylab("Number of infected people") +
labs(title = paste("Model fit to the epidemic curve with beta =",
parameters["beta"],
"and gamma =", parameters["gamma"]))
parameters <- c(beta = 1.15,
gamma = 0.02)
# MODEL FUNCTION
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R
lambda <- beta * I/N
# The differential equations
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_model,
parms = parameters))
ggplot() +
geom_line(data = output, aes(x = time, y = I)) +      # plot the model prediction of the
# number infected as a line
geom_point(data = data, aes(x = time, y = number_infected)
, colour = "red") +  # overlay the data as red dots
xlab("Time (days)")+
ylab("Number of infected people") +
labs(title = paste("Model fit to the epidemic curve with beta =",
parameters["beta"],
"and gamma =", parameters["gamma"]))
data <- data.frame(time = 1:14,
number_infected = c(3,8,26,76,225,298,258,233,189,128,68,29,14,4))
View(data)
require(deSolve)
require(reshape2)
require(ggplot2)
# INPUT
initial_state_values <- c(S = 762,
I = 1,
R = 0)
# Adding the parameters vector
parameters <- c(beta = 1.15,
gamma = 0.02)
times <- seq(from = 0, to = 14, by = 0.1)
# MODEL FUNCTION
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R
lambda <- beta * I/N
# The differential equations
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_model,
parms = parameters))
ggplot() +
geom_line(data = output, aes(x = time, y = I)) +       # plot the model prediction of
# the number infected as a line
geom_point(data = data, aes(x = time, y = number_infected),
colour = "red") +  # overlay the data as red dots
xlab("Time (days)")+
ylab("Number of infected people") +
labs(title = paste("Model fit to the epidemic curve with beta =",
parameters["beta"],
"and gamma =", parameters["gamma"]))
# Adding the parameters vector
parameters <- c(beta = 1,
gamma = 0.04)
times <- seq(from = 0, to = 14, by = 0.1)
# MODEL FUNCTION
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R
lambda <- beta * I/N
# The differential equations
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_model,
parms = parameters))
ggplot() +
geom_line(data = output, aes(x = time, y = I)) +       # plot the model prediction of
# the number infected as a line
geom_point(data = data, aes(x = time, y = number_infected),
colour = "red") +  # overlay the data as red dots
xlab("Time (days)")+
ylab("Number of infected people") +
labs(title = paste("Model fit to the epidemic curve with beta =",
parameters["beta"],
"and gamma =", parameters["gamma"]))
# Adding the parameters vector
parameters <- c(beta = 2,
gamma = 0.01)
times <- seq(from = 0, to = 14, by = 0.1)
# MODEL FUNCTION
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R
lambda <- beta * I/N
# The differential equations
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_model,
parms = parameters))
ggplot() +
geom_line(data = output, aes(x = time, y = I)) +       # plot the model prediction of
# the number infected as a line
geom_point(data = data, aes(x = time, y = number_infected),
colour = "red") +  # overlay the data as red dots
xlab("Time (days)")+
ylab("Number of infected people") +
labs(title = paste("Model fit to the epidemic curve with beta =",
parameters["beta"],
"and gamma =", parameters["gamma"]))
# Adding the parameters vector
parameters <- c(beta = 2,
gamma = 0.065)
times <- seq(from = 0, to = 14, by = 0.1)
# MODEL FUNCTION
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R
lambda <- beta * I/N
# The differential equations
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_model,
parms = parameters))
ggplot() +
geom_line(data = output, aes(x = time, y = I)) +       # plot the model prediction of
# the number infected as a line
geom_point(data = data, aes(x = time, y = number_infected),
colour = "red") +  # overlay the data as red dots
xlab("Time (days)")+
ylab("Number of infected people") +
labs(title = paste("Model fit to the epidemic curve with beta =",
parameters["beta"],
"and gamma =", parameters["gamma"]))
# Adding the parameters vector
parameters <- c(beta = 1,
gamma = 0.065)
times <- seq(from = 0, to = 14, by = 0.1)
# MODEL FUNCTION
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R
lambda <- beta * I/N
# The differential equations
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_model,
parms = parameters))
ggplot() +
geom_line(data = output, aes(x = time, y = I)) +       # plot the model prediction of
# the number infected as a line
geom_point(data = data, aes(x = time, y = number_infected),
colour = "red") +  # overlay the data as red dots
xlab("Time (days)")+
ylab("Number of infected people") +
labs(title = paste("Model fit to the epidemic curve with beta =",
parameters["beta"],
"and gamma =", parameters["gamma"]))
# Adding the parameters vector
parameters <- c(beta = 0.5,
gamma = 0.065)
times <- seq(from = 0, to = 14, by = 0.1)
# MODEL FUNCTION
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R
lambda <- beta * I/N
# The differential equations
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_model,
parms = parameters))
ggplot() +
geom_line(data = output, aes(x = time, y = I)) +       # plot the model prediction of
# the number infected as a line
geom_point(data = data, aes(x = time, y = number_infected),
colour = "red") +  # overlay the data as red dots
xlab("Time (days)")+
ylab("Number of infected people") +
labs(title = paste("Model fit to the epidemic curve with beta =",
parameters["beta"],
"and gamma =", parameters["gamma"]))
# Adding the parameters vector
parameters <- c(beta = 1.5,
gamma = 0.065)
times <- seq(from = 0, to = 14, by = 0.1)
# MODEL FUNCTION
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R
lambda <- beta * I/N
# The differential equations
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_model,
parms = parameters))
ggplot() +
geom_line(data = output, aes(x = time, y = I)) +       # plot the model prediction of
# the number infected as a line
geom_point(data = data, aes(x = time, y = number_infected),
colour = "red") +  # overlay the data as red dots
xlab("Time (days)")+
ylab("Number of infected people") +
labs(title = paste("Model fit to the epidemic curve with beta =",
parameters["beta"],
"and gamma =", parameters["gamma"]))
# Adding the parameters vector
parameters <- c(beta = 1.7,
gamma = 0.065)
times <- seq(from = 0, to = 14, by = 0.1)
# MODEL FUNCTION
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R
lambda <- beta * I/N
# The differential equations
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_model,
parms = parameters))
ggplot() +
geom_line(data = output, aes(x = time, y = I)) +       # plot the model prediction of
# the number infected as a line
geom_point(data = data, aes(x = time, y = number_infected),
colour = "red") +  # overlay the data as red dots
xlab("Time (days)")+
ylab("Number of infected people") +
labs(title = paste("Model fit to the epidemic curve with beta =",
parameters["beta"],
"and gamma =", parameters["gamma"]))
# Adding the parameters vector
parameters <- c(beta = 1.7,
gamma = 0.05)
times <- seq(from = 0, to = 14, by = 0.1)
# MODEL FUNCTION
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R
lambda <- beta * I/N
# The differential equations
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_model,
parms = parameters))
ggplot() +
geom_line(data = output, aes(x = time, y = I)) +       # plot the model prediction of
# the number infected as a line
geom_point(data = data, aes(x = time, y = number_infected),
colour = "red") +  # overlay the data as red dots
xlab("Time (days)")+
ylab("Number of infected people") +
labs(title = paste("Model fit to the epidemic curve with beta =",
parameters["beta"],
"and gamma =", parameters["gamma"]))
# Adding the parameters vector
parameters <- c(beta = 1.7,
gamma = 0.04)
times <- seq(from = 0, to = 14, by = 0.1)
# MODEL FUNCTION
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R
lambda <- beta * I/N
# The differential equations
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
# Adding the parameters vector
parameters <- c(beta = 1.7,
gamma = 0.1)
times <- seq(from = 0, to = 14, by = 0.1)
# MODEL FUNCTION
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R
lambda <- beta * I/N
# The differential equations
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_model,
parms = parameters))
ggplot() +
geom_line(data = output, aes(x = time, y = I)) +       # plot the model prediction of
# the number infected as a line
geom_point(data = data, aes(x = time, y = number_infected),
colour = "red") +  # overlay the data as red dots
xlab("Time (days)")+
ylab("Number of infected people") +
labs(title = paste("Model fit to the epidemic curve with beta =",
parameters["beta"],
"and gamma =", parameters["gamma"]))
# Adding the parameters vector
parameters <- c(beta = 1.7,
gamma = 0.2)
times <- seq(from = 0, to = 14, by = 0.1)
# MODEL FUNCTION
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R
lambda <- beta * I/N
# The differential equations
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_model,
parms = parameters))
ggplot() +
geom_line(data = output, aes(x = time, y = I)) +       # plot the model prediction of
# the number infected as a line
geom_point(data = data, aes(x = time, y = number_infected),
colour = "red") +  # overlay the data as red dots
xlab("Time (days)")+
ylab("Number of infected people") +
labs(title = paste("Model fit to the epidemic curve with beta =",
parameters["beta"],
"and gamma =", parameters["gamma"]))
# Adding the parameters vector
parameters <- c(beta = 1.7,
gamma = 0.3)
times <- seq(from = 0, to = 14, by = 0.1)
# MODEL FUNCTION
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R
lambda <- beta * I/N
# The differential equations
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_model,
parms = parameters))
ggplot() +
geom_line(data = output, aes(x = time, y = I)) +       # plot the model prediction of
# the number infected as a line
geom_point(data = data, aes(x = time, y = number_infected),
colour = "red") +  # overlay the data as red dots
xlab("Time (days)")+
ylab("Number of infected people") +
labs(title = paste("Model fit to the epidemic curve with beta =",
parameters["beta"],
"and gamma =", parameters["gamma"]))
# Adding the parameters vector
parameters <- c(beta = 1.7,
gamma = 0.4)
times <- seq(from = 0, to = 14, by = 0.1)
# MODEL FUNCTION
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R
lambda <- beta * I/N
# The differential equations
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_model,
parms = parameters))
ggplot() +
geom_line(data = output, aes(x = time, y = I)) +       # plot the model prediction of
# the number infected as a line
geom_point(data = data, aes(x = time, y = number_infected),
colour = "red") +  # overlay the data as red dots
xlab("Time (days)")+
ylab("Number of infected people") +
labs(title = paste("Model fit to the epidemic curve with beta =",
parameters["beta"],
"and gamma =", parameters["gamma"]))
# Adding the parameters vector
parameters <- c(beta = 1.7,
gamma = 0.45)
times <- seq(from = 0, to = 14, by = 0.1)
# MODEL FUNCTION
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R
lambda <- beta * I/N
# The differential equations
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
# Output
return(list(c(dS, dI, dR)))
})
}
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_model,
parms = parameters))
ggplot() +
geom_line(data = output, aes(x = time, y = I)) +       # plot the model prediction of
# the number infected as a line
geom_point(data = data, aes(x = time, y = number_infected),
colour = "red") +  # overlay the data as red dots
xlab("Time (days)")+
ylab("Number of infected people") +
labs(title = paste("Model fit to the epidemic curve with beta =",
parameters["beta"],
"and gamma =", parameters["gamma"]))
setwd("~/Dropbox/github/mark_recapture/output")
area_dmat_italy <- read.csv("Italy_Distances.csv")[,-1] # load distances between study sites for Italy
ps_simple <- read.csv("mcmc-samples-simple.csv") # read in model results
Plot_Italy_1.1. <- ggplot(data=ps_simple, aes(N_hat_italy.1.1)) +
geom_histogram() +
ylab("Frequency") +
xlab("Population Size") +
ggtitle("Pescara Site 1")                         #Primary period 1. Study site 1.
require(ggplot2)
require(ggpubr)
Plot_Italy_1.1. <- ggplot(data=ps_simple, aes(N_hat_italy.1.1)) +
geom_histogram() +
ylab("Frequency") +
xlab("Population Size") +
ggtitle("Pescara Site 1")                         #Primary period 1. Study site 1.
Plot_Italy_1.1.
